{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to tmp-folder","text":""},{"location":"#installation","title":"Installation","text":"<p>Install from PyPI:</p> <pre><code>pip install tmp-folder\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Let's create a <code>main.py</code> file with a function that requires a temporary folder during its execution:</p> <pre><code>from pathlib import Path\n\n\ndef this_func_create_a_tmp_file_and_return_its_path(tmp_folder: Path) -&gt; Path:\ntmp_file_path = tmp_folder / \"tmp_file.txt\"\nwith open(tmp_file_path, \"w\") as file:\nfile.write(\"Hello World\")\nreturn tmp_file_path\n</code></pre> <p>The type hint is totally optional:</p> <pre><code>from pathlib import Path\ndef this_func_create_a_tmp_file_and_return_its_path(tmp_folder: Path) -&gt; Path:\ntmp_file_path = tmp_folder / \"tmp_file.txt\"\n    with open(tmp_file_path, \"w\") as file:\n        file.write(\"Hello World\")\n\n    return tmp_file_path\n</code></pre> <p>But is just to make clear that the function expects a Path folder, to store files in it.</p> <p>Use our decorator (that extends python <code>tempfile.TemporaryDirectory</code>) to give the function the superpower to use a temporary folder while it is being executed and after that <code>tmp-folder</code> will take care of the clean up:</p> <pre><code>from pathlib import Path\n\nfrom tmp_folder import use_tmp_folder\n@use_tmp_folder  # this decorator does the magic\ndef this_func_create_a_tmp_file_and_return_its_path(tmp_folder: Path) -&gt; Path:\n    tmp_file_path = tmp_folder / \"tmp_file.txt\"\n    with open(tmp_file_path, \"w\") as file:\n        file.write(\"Hello World\")\n\n    return tmp_file_path\n</code></pre> <p>Add the execution of function and add assert statements double check the magic of <code>tmp-folder</code>:</p> <pre><code>from pathlib import Path\n\nfrom tmp_folder.main import use_tmp_folder\n\n\n@use_tmp_folder  # this decorator does the magic\ndef this_func_create_a_tmp_file_and_return_its_path(tmp_folder: Path) -&gt; Path:\n    tmp_file_path = tmp_folder / \"tmp_file.txt\"\n    with open(tmp_file_path, \"w\") as file:\n        file.write(\"Hello World\")\n\nassert tmp_file_path.exists()  # double check that the file actually exists\nreturn tmp_file_path\n\n\nif __name__ == \"__main__\":\ntmp_file_path = this_func_create_a_tmp_file_and_return_its_path()\n# After the function is executed, the folder and its files are gone.\nassert not tmp_file_path.exists()\n</code></pre> <p>Execute <code>main.py</code></p> <p><pre><code>python main.py\n</code></pre> See how there are not assertments error? That's the power of <code>tmp-folder</code> \ud83d\udcaa</p>"}]}